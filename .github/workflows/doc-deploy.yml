name: Deploy MkDocs

on:
  push:
    branches:
      - 1811_testpr
      - 1811_mkdocs_documentation_website

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.repository }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get artifact ID from the latest successful run
        id: get_artifact
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflow_id = 'github-actions.yml'; 

            console.log('R√©cup√©ration des derniers artefacts');
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflow_id,
              status: "success",
              per_page: 1
            });

            if (runs.data.total_count === 0) { 
              console.log("Aucun artefact trouv√©. On continue quand m√™me.");
              return;
            }

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: runs.data.workflow_runs[0].id
            });

            const artifact = artifacts.data.artifacts.find(a => a.name === "github-pages");
            if (artifact) {
              console.log("Artifact trouv√© avec ID :", artifact.id);
              const response = await github.rest.actions.downloadArtifact({
                owner,
                repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              require('fs').writeFileSync("github-pages.zip", Buffer.from(response.data));
              require('child_process').execSync(`unzip -o github-pages.zip -d "/tmp/gh-artifact-extract" && mkdir -p docs/site && tar xvf /tmp/gh-artifact-extract/artifact.tar -C docs/site/`);
              console.log("Artefact t√©l√©charg√© et extrait");
            } else {
              console.log("Aucun artefact trouv√©.");
            }

      - uses: actions/setup-python@v5
        with:
          python-version: 3.13.0

      - name: Install dependencies
        run: |
          echo "Installation des d√©pendances"
          pip install -r docs/requirements.txt

      - name: Build MkDocs site
        run: |
          echo "Compilation du site MkDocs"
          cd docs
          rm -rf site/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          mkdocs build --site-dir site/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

      - name: Upload static files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site

  deploy:
    needs: build
    permissions:
      pages: write      
      id-token: write
      issues: write
      pull-requests: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # L'URL qui sera affich√©e dans l'environnement

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Override page_url
        id: change-page-url
        run: |
          echo "Mise √† jour de l'URL de d√©ploiement"
          if [[ "${GITHUB_REF}" == "refs/heads/1811_testpr" ]]; then
            echo "new_page_url=https://titouvgx.github.io/tock/1811_testpr/" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/1811_mkdocs_documentation_website" ]]; then
            echo "new_page_url=https://titouvgx.github.io/tock/1811_mkdocs_documentation_website/" >> $GITHUB_OUTPUT
          fi

      - uses: actions/github-script@v7
        name: Post comment
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Commentaire sur la PR :');
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Website is published: [${{ steps.change-page-url.outputs.new_page_url }}](${{ steps.change-page-url.outputs.new_page_url }})'
            });

  # cleanup:
  #   needs: deploy
  #   permissions:
  #     pages: write      
  #     id-token: write
  #     issues: write
  #     pull-requests: write

  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get artifact ID from the latest successful run
  #       id: get_artifact
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const { owner, repo } = context.repo;
  #           const workflow_id = 'github-actions.yml'; 

  #           console.log('R√©cup√©ration des derniers artefacts');
  #           const runs = await github.rest.actions.listWorkflowRuns({
  #             owner,
  #             repo,
  #             workflow_id: workflow_id,
  #             status: "success",
  #             per_page: 1
  #           });

  #           if (runs.data.total_count === 0) { 
  #             console.log("Aucun artefact trouv√©. On continue quand m√™me.");
  #             return;
  #           }

  #           const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
  #             owner,
  #             repo,
  #             run_id: runs.data.workflow_runs[0].id
  #           });

  #           const artifact = artifacts.data.artifacts.find(a => a.name === "github-pages");
  #           if (artifact) {
  #             console.log("Artifact trouv√© avec ID :", artifact.id);
  #             const response = await github.rest.actions.downloadArtifact({
  #               owner,
  #               repo,
  #               artifact_id: artifact.id,
  #               archive_format: 'zip'
  #             });
  #             require('fs').writeFileSync("github-pages.zip", Buffer.from(response.data));
  #             require('child_process').execSync(`unzip -o github-pages.zip -d "/tmp/gh-artifact-extract" && mkdir -p docs/site && tar xvf /tmp/gh-artifact-extract/artifact.tar -C docs/site/`);
  #             console.log("Artefact t√©l√©charg√© et extrait");
  #           } else {
  #             console.log("Aucun artefact trouv√©.");
  #           }

  #     - name: Supprimer le dossier associ√© √† la PR ferm√©e
  #       run: |
  #         branch_name="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
  #         echo "branch_name: $branch_name"

  #         echo "üìÇ Contenu extrait de artifact.tar :"
  #         ls -l docs/site/

  #         folder_path="docs/site/${branch_name}"
  #         echo "folder_path: $folder_path"

  #         if [ -z "$folder_path" ]; then
  #           echo "‚ùå Aucun dossier trouv√© pour la branche ${branch_name} !"
  #           exit 1
  #         else
  #           echo "üõ†Ô∏è Chemin r√©el du dossier √† supprimer : $folder_path"
  #           rm -rf "$folder_path"
  #           echo "‚úÖ Dossier supprim√© avec succ√®s."
  #         fi

  #         ls -l docs/site/

  #     - name: Upload static files as artifact
  #       id: deployment
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: docs/site

  #     - name: Post cleanup comment
  #       run: |
  #         echo "Commentaire apr√®s nettoyage"
  #         github.rest.issues.createComment({
  #           issue_number: context.payload.pull_request.number,
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           body: 'Cleanup completed for PR and associated branch: [${{ github.event.pull_request.head.ref }}]'
  #         });


