name: Cleanup branch

on:
  pull_request_target:
    types: [closed]  
  workflow_dispatch:
    inputs:
      cleanup_branch:
        description: "Nom de la branche √† nettoyer"
        required: true
        type: string

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.repository }}
  cancel-in-progress: false

jobs:
  cleanup:
    permissions:
      pages: write      
      id-token: write
      issues: write
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get artifact ID from the latest successful run
        id: get_artifact
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflow_id = '.github/workflows/doc-deploy.yml'; // Remplace par ton vrai fichier

            console.log('R√©cup√©ration des derniers artefacts');
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflow_id,
              status: "success",
              per_page: 1
            });

            if (runs.data.total_count === 0) { 
              console.log("Aucun artefact trouv√©. On continue quand m√™me.");
              return;
            }

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: runs.data.workflow_runs[0].id
            });

            const artifact = artifacts.data.artifacts.find(a => a.name === "github-pages");
            if (artifact) {
              console.log("Artifact trouv√© avec ID :", artifact.id);
              const response = await github.rest.actions.downloadArtifact({
                owner,
                repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              require('fs').writeFileSync("github-pages.zip", Buffer.from(response.data));
              require('child_process').execSync(`unzip -o github-pages.zip -d "/tmp/gh-artifact-extract" && mkdir -p docs/site && tar xvf /tmp/gh-artifact-extract/artifact.tar -C docs/site/`);
              console.log("Artefact t√©l√©charg√© et extrait");
            } else {
              console.log("Aucun artefact trouv√©.");
            }

      - name: Lister les fichiers de l'artefact
        run: |
          echo "üìÇ Contenu de l'artefact apr√®s extraction :"
          ls -R /tmp/gh-artifact-extract/

      - name: Supprimer le dossier associ√© √† la PR ferm√©e
        run: |
          branch_name="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "üìÇ V√©rification du contenu :"
          ls -l docs/site/

          folder_path="docs/site/${branch_name}"
          echo "üõ†Ô∏è Dossier cibl√© : $folder_path"

          if [ ! -d "$folder_path" ]; then
            echo "‚ùå Aucun dossier trouv√© pour la branche ${branch_name} !"
            exit 1
          else
            rm -rf "$folder_path"
            echo "‚úÖ Dossier supprim√© avec succ√®s."
          fi

          ls -l docs/site/

      - name: Upload static files as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site

      - name: Post cleanup comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request_target'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Cleanup completed for PR and associated branch: [${{ github.event.pull_request.head.ref }}]'
            });
